package main

import (
	"context"
	"os"

    {{ if .WithMySQL }}
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	{{ end }}
	"github.com/mylxsw/go-toolkit/container"
	"github.com/mylxsw/go-toolkit/events"
	"github.com/mylxsw/go-toolkit/graceful"
	"github.com/mylxsw/go-toolkit/log"
	"gopkg.in/urfave/cli.v1"
	"gopkg.in/urfave/cli.v1/altsrc"

	webApp "{{ .Module }}/app"
	"{{ .Module }}/config"
)

var logger = log.Module("main")

var Version = ""

func main() {

	serverFlags := []cli.Flag{
		cli.StringFlag{
			Name:  "conf",
			Value: "",
			Usage: "配置文件路径",
		},
		altsrc.NewStringFlag(cli.StringFlag{
			Name:  "log_level",
			Value: "DEBUG",
			Usage: "日志输出级别",
		}),
		altsrc.NewBoolTFlag(cli.BoolTFlag{
			Name:  "log_colorful",
			Usage: "日志是否彩色输出",
		}),
		altsrc.NewStringFlag(cli.StringFlag{
			Name:  "listen",
			Value: "0.0.0.0:19950",
			Usage: "http服务地址",
		}),{{ if .WithMySQL }}
		altsrc.NewStringFlag(cli.StringFlag{
			Name:  "mysql_conn",
			Value: "root:@tcp(127.0.0.1:3306)/dbname?parseTime=true",
			Usage: "数据库连接地址",
		}),{{ end }}
	}

	app := cli.NewApp()
	app.Name = "{{ .ProjectName }}"
	app.Version = Version
	app.Authors = []cli.Author{
		{
			Name:  "mylxsw",
			Email: "mylxsw@aicode.cc",
		},
	}
	app.Action = server
	app.Before = func(c *cli.Context) error {
		conf := c.String("conf")
		if conf == "" {
			return nil
		}

		inputSource, err := altsrc.NewYamlSourceFromFile(conf)
		if err != nil {
			return err
		}

		return altsrc.ApplyInputSourceValues(c, inputSource, serverFlags)
	}
	app.Flags = serverFlags

	if err := app.Run(os.Args); err != nil {
		logger.Emergency(err.Error())
	}
}

func server(c *cli.Context) error {
	log.SetDefaultLevel(log.GetLevelByName(c.String("log_level")))
	log.SetDefaultColorful(c.Bool("log_colorful"))

	logger.Infof("server starting, version=%s", Version)

	ctx, cancel := context.WithCancel(context.Background())
	cc := container.NewWithContext(ctx)

	cc.MustBindValue("version", Version)
	cc.MustSingleton(func() *cli.Context {
		return c
	})

	cc.MustSingleton(config.Load)
	cc.MustSingleton(func() events.EventStore {
		return events.NewMemoryEventStore(false)
	})
	cc.MustSingleton(events.NewEventManager)
	cc.MustSingleton(graceful.NewWithDefault)
	cc.MustSingleton(webApp.New)

    {{ if .WithMySQL }}
	cc.MustSingleton(func(conf *config.Config) (*gorm.DB, error) {
		db, err := gorm.Open("mysql", conf.MySQLConn)
		if err != nil {
			return nil, err
		}

		db.LogMode(true)
		db.SetLogger(logger)

		return db, nil
	})
	{{ end }}

	// cc.MustResolve(func(manager *events.EventManager) {
	// 	manager.Listen(func(evt EventType) {})
	// })

	defer cc.MustResolve(func() {
		cancel()

		logger.Debugf("all services has been stopped")
	})

	err := cc.ResolveWithError(func(app *webApp.App, gf *graceful.Graceful) error {
		if err := app.Init(); err != nil {
			return err
		}

		if err := app.Start(); err != nil {
			return err
		}

		return gf.Start()
	})
	if err != nil {
		return err
	}

	return nil
}
